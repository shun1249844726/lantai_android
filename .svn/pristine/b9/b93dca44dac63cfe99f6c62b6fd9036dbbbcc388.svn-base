package com.lexinsmart.planmanager;

/* 
 * 
 * 105 103 101 102		105：5   相位编号
 103：3   相位方向
 101：1   车道编号
 102：2   车道类型
 * 108 103 101 111 
 * 104 103 102 101 
 * 107 105 101 111
 * 101 105 102 104
 * 106 107 101 111 
 * 102 107 102 101 
 * 103 107 103 100
 * */

import static com.lexinsmart.util.Constants.IP;
import static com.lexinsmart.util.Constants.GETGPS;
import static com.lexinsmart.util.Constants.PORT;
import static com.lexinsmart.util.Constants.Roads;
import static com.lexinsmart.util.Constants.SOCKETSTATE;

import java.util.ArrayList;
import java.util.List;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.Loader.ForceLoadContentObserver;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.os.Handler;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.baidu.mapapi.SDKInitializer;
import com.baidu.mapapi.map.BaiduMap;
import com.baidu.mapapi.map.BitmapDescriptor;
import com.baidu.mapapi.map.BitmapDescriptorFactory;
import com.baidu.mapapi.map.MapStatus;
import com.baidu.mapapi.map.MapStatusUpdate;
import com.baidu.mapapi.map.MapStatusUpdateFactory;
import com.baidu.mapapi.map.MapView;
import com.baidu.mapapi.map.Marker;
import com.baidu.mapapi.map.MarkerOptions;
import com.baidu.mapapi.map.OverlayOptions;
import com.baidu.mapapi.map.Polyline;
import com.baidu.mapapi.map.PolylineOptions;
import com.baidu.mapapi.model.LatLng;
import com.baidu.mapapi.utils.CoordinateConverter;
import com.baidu.mapapi.utils.CoordinateConverter.CoordType;
import com.lexinsmart.SocketTools.Client;
import com.lexinsmart.SocketTools.ISocketResponse;
import com.lexinsmart.SocketTools.Packet;
import com.lexinsmart.util.JsonTools;
import com.lexinsmart_lantai.R;

public class ExecutePlan extends Activity implements OnClickListener {
	Marker mMarkerA;
	Marker mMarkerB;
	ArrayList<String[]> RoadDetails;
	private ImageView layoutDetailsImg;
	private LinearLayout detailsLayout;
	private Button executeplan_execute, executeplan_stop, executeplan_exit;
	private TextView executeplan_nextcross, executeplan_distance,
			executeplan_orientation, executeplan_totlecross,
			executeplan_leftcross, executeplan_connectstatus;
	private int totleCross;
	Context mContext;
	ArrayList<String[]> roadDetails_list;
	String[][] RoadDetails_array;
	MapView mMapView = null;
	Polyline mPolyline;
	TextView roadName;
	BaiduMap mBaiduMap;
	private Client user = null;
	private int DELYED = 1000;
	private int i = 0;
	Packet packet;
	private int startCross, fleet_len, fleet_style;

	private LatLng myLocation;
	double longtitude;
	double latitude;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// 在使用SDK各组件之前初始化context信息，传入ApplicationContext
		// 注意该方法要再setContentView方法之前实现
		SDKInitializer.initialize(getApplicationContext());
		setContentView(R.layout.activity_executeplan);
		mContext = this;
		// 获取地图控件引用
		Intent intent = getIntent();
		String roadDetalis = intent.getStringExtra("roadDetails");

		startCross = intent.getIntExtra("startCross", -1);
		fleet_len = intent.getIntExtra("fleet_len", -1);
		fleet_style = intent.getIntExtra("fleet_style", -1);
		System.out.println(roadDetalis + "," + startCross + "," + fleet_len
				+ "," + fleet_style);
		roadDetails_list = JsonTools.changeJsonToArray(roadDetalis);
		RoadDetails_array = (String[][]) roadDetails_list
				.toArray(new String[roadDetails_list.size()][]);

		// for (int i = 0; i < RoadDetails_array.length; i++) {
		// for (int j = 0; j < RoadDetails_array[0].length; j++) {
		// System.out.println("RoadDetails_array"+RoadDetails_array[i][j]);
		// }
		// }
		totleCross = roadDetails_list.size();
		findViews();
		LatLng cenpt = new LatLng(31.985966, 120.898925);
		// 定义地图状态
		MapStatus mMapStatus = new MapStatus.Builder().target(cenpt).zoom(15)
				.build();
		// 定义MapStatusUpdate对象，以便描述地图状态将要发生的变化
		MapStatusUpdate mMapStatusUpdate = MapStatusUpdateFactory
				.newMapStatus(mMapStatus);
		// 改变地图状态
		mBaiduMap.setMapStatus(mMapStatusUpdate);

		addMarkers();
		addCustomElementsDemo();
		addLocation();
	}

	private void addLocation() {// 定义Maker坐标点
		LatLng point = new LatLng(31.95869166666667, 120.898925);
		// 构建Marker图标
		BitmapDescriptor bitmap = BitmapDescriptorFactory
				.fromResource(R.drawable.ic_launcher);
		// 构建MarkerOption，用于在地图上添加Marker
		OverlayOptions option = new MarkerOptions().position(point)
				.icon(bitmap);
		// 在地图上添加Marker，并显示
		mMarkerB = (Marker) mBaiduMap.addOverlay(option);
	}

	/**
	 * 画线
	 *
	 */
	private void addCustomElementsDemo() {
		List<LatLng> points = new ArrayList<LatLng>();
		for (int i = 0; i < RoadDetails_array.length; i++) {
			LatLng p = new LatLng(Double.valueOf(RoadDetails_array[i][3]
					.toString()), Double.valueOf(RoadDetails_array[i][2]
					.toString()));
			points.add(p);
		}
		OverlayOptions ooPolyline = new PolylineOptions().width(10)
				.color(0xAAFF0000).points(points);
		mPolyline = (Polyline) mBaiduMap.addOverlay(ooPolyline);
	}

	/**
	 * 获取各路口经纬度
	 * 
	 */
	private double[][] getCoordinates() {
		double[][] Coordinates = new double[RoadDetails_array.length][2];
		for (int i = 0; i < RoadDetails_array.length; i++) {
			Coordinates[i][0] = Double.valueOf(RoadDetails_array[i][2]
					.toString());
			Coordinates[i][1] = Double.valueOf(RoadDetails_array[i][3]
					.toString());
		}
		return Coordinates;
	}

	private void addMarkers() {
		double[][] coordinates = getCoordinates();
		LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		View view = inflater.inflate(R.layout.marker, null);
		roadName = (TextView) view.findViewById(R.id.roadnameId);
		for (int i = 0; i < coordinates.length; i++) {
			System.out.println("coordinates[i][0]:" + coordinates[i][0]
					+ ";coordinates[i][1]:" + coordinates[i][1]);
			LatLng llA = new LatLng(coordinates[i][1], coordinates[i][0]);

			roadName.setText(RoadDetails_array[i][0]);
			BitmapDescriptor bd1 = BitmapDescriptorFactory
					.fromBitmap(getBitmapFromView(view));
			MarkerOptions ooA = new MarkerOptions().position(llA).icon(bd1)
					.zIndex(9).draggable(true).title(RoadDetails_array[i][0]);

			mMarkerA = (Marker) (mBaiduMap.addOverlay(ooA));
		}
	}

	private void findViews() {
		mMapView = (MapView) findViewById(R.id.executeplan_mapId);
		mBaiduMap = mMapView.getMap();
		layoutDetailsImg = (ImageView) findViewById(R.id.executeplan_layoutmoreId);
		layoutDetailsImg.setBackgroundResource(R.drawable.layoutshow);
		detailsLayout = (LinearLayout) findViewById(R.id.executeplan_layoutdetailsId);
		layoutDetailsImg.setOnClickListener(this);

		executeplan_nextcross = (TextView) findViewById(R.id.executeplan_nextcrossId);// 下个路口
		executeplan_distance = (TextView) findViewById(R.id.executeplan_distanceId);// 距离
		executeplan_orientation = (TextView) findViewById(R.id.executeplan_orientationId);// 方向
		executeplan_totlecross = (TextView) findViewById(R.id.executeplan_totlecrossId);// 任务路口
		executeplan_totlecross.setText("" + totleCross);
		executeplan_leftcross = (TextView) findViewById(R.id.executeplan_leftcrossId);// 剩余路口
		executeplan_connectstatus = (TextView) findViewById(R.id.executeplan_connectstatusId);// 连接状态

		executeplan_execute = (Button) findViewById(R.id.executeplan_executeId);
		executeplan_execute.setOnClickListener(this);
		executeplan_stop = (Button) findViewById(R.id.executeplan_stopId);
		executeplan_stop.setOnClickListener(this);
		executeplan_exit = (Button) findViewById(R.id.executeplan_exitId);
		executeplan_exit.setOnClickListener(this);

		layoutDetailsImg.setBackgroundResource(R.drawable.layouthide);

		user = new Client(this.getApplicationContext(), socketListener);
		packet = new Packet();
	}

	/**
	 * 定时器处理
	 * @author xu
	 * 
	 */
	Handler handler = new Handler();
	Runnable runnable = new Runnable() {
		@Override
		public void run() {
			// handler自带方法实现定时器
			try {
				handler.postDelayed(this, DELYED);
				executeplan_connectstatus.setText(SOCKETSTATE);

				packet.pack_byte(GETGPS);
				user.send(packet);

				// LatLng ll = mMarkerB.getPosition();
				//
				//
				// LatLng llNew = new LatLng(ll.latitude + 0.00005,
				// ll.longitude + 0.00005);
				mMarkerB.setPosition(myLocation);

				System.out.println("do..." + i++);

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				System.out.println("exception...");
			}

		}
	};
	/**
	 * 接收数据回调
	 * @author xu
	 */
	private ISocketResponse socketListener = new ISocketResponse() {

		@Override
		public void onSocketResponse(final String txt) {
			runOnUiThread(new Runnable() {
				public void run() {

					String temp = txt.trim().toString();
					System.out.println("txt.trim():" + temp);
					if (txt.startsWith("7E")) {
						String[] array_temp = temp.split(" ");
						int[] array_temp_byte = new int[array_temp.length];

						for (int i = 0; i < array_temp_byte.length; i++) {
							array_temp_byte[i] = Integer.valueOf(array_temp[i],
									16);
						}
						if (array_temp_byte[17] == 0x7E) {
							// executeplan_connectstatus.setText(""
							// + array_temp_byte[0] + ","
							// + array_temp_byte[1] + ","
							// + array_temp_byte[2] + ","
							// + array_temp_byte[3] + ","
							// + array_temp_byte[4] + ","
							// + array_temp_byte[5] + ","
							// + array_temp_byte[6] + ","
							// + array_temp_byte[7] + ","
							// + array_temp_byte[8] + ","
							// + array_temp_byte[9] + ","
							// + array_temp_byte[10] + ","
							// + array_temp_byte[11] + ","
							// + array_temp_byte[12] + ","
							// + array_temp_byte[13] + ","
							// + array_temp_byte[14] + ","
							// + array_temp_byte[15] + ","
							// + array_temp_byte[16] + ","
							// + array_temp_byte[17]);

							// longtitude = (double) ((array_temp_byte[8] * 256
							// * 256 * 256 + array_temp_byte[9] * 256
							// * 256 + array_temp_byte[10] * 256 +
							// array_temp_byte[11])) / 1000000;
							//
							// latitude = (double) ((array_temp_byte[12] * 256
							// * 256 * 256 + array_temp_byte[13] * 256
							// * 256 + array_temp_byte[14] * 256 +
							// array_temp_byte[15])) / 1000000;

							longtitude = 120.898925;

							latitude = 31.95869166666667;

							executeplan_connectstatus.setText("" + latitude
									+ '\n' + longtitude);

							LatLng llA = new LatLng(latitude + (0.0002 * i),
									longtitude - (0.00002 * i));

							// 将GPS设备采集的原始GPS坐标转换成百度坐标
							CoordinateConverter converter = new CoordinateConverter();
							converter.from(CoordType.GPS);
							// sourceLatLng待转换坐标
							converter.coord(llA);
							myLocation = converter.convert();

							// myLocation = new LatLng(latitude, longtitude);
						}
						if (array_temp_byte[9] == 0x7E) {

						}

					}
					// recContent.getText().append(txt).append("\r\n");
				}
			});
		}
	};

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.executeplan_layoutmoreId: // 更多图片
			if (detailsLayout.getVisibility() == View.GONE) {
				detailsLayout.setVisibility(View.VISIBLE);
				layoutDetailsImg.setBackgroundResource(R.drawable.layouthide);
			} else if (detailsLayout.getVisibility() == View.VISIBLE) {
				detailsLayout.setVisibility(View.GONE);
				layoutDetailsImg.setBackgroundResource(R.drawable.layoutshow);
			}
			break;
		case R.id.executeplan_executeId: // 开始
			// ToastUtil.showShort(mContext, "IP:" + IP + ":" + PORT);
			user.open(IP, PORT);
			handler.postDelayed(runnable, DELYED); // 每隔1s执行
			break;
		case R.id.executeplan_stopId: // 暂停
			handler.removeCallbacks(runnable);
			break;
		case R.id.executeplan_exitId: // 结束
			handler.removeCallbacks(runnable);
			user.close();
			break;
		case R.id.executeplan_nextcrossId: // 下个路口
			break;
		case R.id.executeplan_distanceId: // 距离
			break;
		case R.id.executeplan_orientationId:// 方向
			break;
		case R.id.executeplan_totlecrossId:// 任务路口
			break;
		case R.id.executeplan_leftcrossId:// 剩余路口
			break;
		case R.id.executeplan_connectstatusId:// 连接状态
			break;
		default:
			break;
		}

	}

	private Bitmap getBitmapFromView(View view) {
		view.destroyDrawingCache();
		view.measure(View.MeasureSpec.makeMeasureSpec(0,
				View.MeasureSpec.UNSPECIFIED), View.MeasureSpec
				.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
		view.layout(0, 0, view.getMeasuredWidth(), view.getMeasuredHeight());
		view.setDrawingCacheEnabled(true);
		Bitmap bitmap = view.getDrawingCache(true);
		return bitmap;
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();

		handler.removeCallbacks(runnable);
		user.close();
		// 在activity执行onDestroy时执行mMapView.onDestroy()，实现地图生命周期管理
		mMapView.onDestroy();
	}

	@Override
	protected void onResume() {
		super.onResume();
		// 在activity执行onResume时执行mMapView. onResume ()，实现地图生命周期管理
		mMapView.onResume();
	}

	@Override
	protected void onPause() {
		super.onPause();
		// 在activity执行onPause时执行mMapView. onPause ()，实现地图生命周期管理
		mMapView.onPause();
	}

}