package com.lexinsmart.planmanager;

import java.util.ArrayList;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.baidu.mapapi.SDKInitializer;
import com.baidu.mapapi.map.BaiduMap;
import com.baidu.mapapi.map.MapStatus;
import com.baidu.mapapi.map.MapStatusUpdate;
import com.baidu.mapapi.map.MapStatusUpdateFactory;
import com.baidu.mapapi.map.MapView;
import com.baidu.mapapi.model.LatLng;
import com.lexinsmart.util.JsonTools;
import com.lexinsmart_lantai.R;

public class ExecutePlan extends Activity implements OnClickListener {
	private ImageView layoutDetailsImg;
	private LinearLayout detailsLayout;
	private Button executeplan_execute, executeplan_stop, executeplan_exit;
	private TextView executeplan_nextcross, executeplan_distance,
			executeplan_orientation, executeplan_totlecross,
			executeplan_leftcross, executeplan_connectstatus;
	private int totleCross;
	ArrayList<String[]> roadDetails_list;
	String[][] RoadDetails_array;
	MapView mMapView = null;
	BaiduMap mBaiduMap;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// 在使用SDK各组件之前初始化context信息，传入ApplicationContext
		// 注意该方法要再setContentView方法之前实现
		SDKInitializer.initialize(getApplicationContext());
		setContentView(R.layout.activity_executeplan);
		// 获取地图控件引用
		Intent intent = getIntent();
		String roaddetalis = intent.getStringExtra("roadDetalis");
		roadDetails_list = JsonTools.changeJsonToArray(roaddetalis);
		RoadDetails_array = (String[][]) roadDetails_list.toArray(new String[roadDetails_list.size()][]);
		totleCross = roadDetails_list.size();
		findViews();
		  LatLng cenpt = new LatLng(31.985966,120.899893); 
        //定义地图状态
        MapStatus mMapStatus = new MapStatus.Builder()
        .target(cenpt)
        .zoom(15)
        .build();
        //定义MapStatusUpdate对象，以便描述地图状态将要发生的变化


        MapStatusUpdate mMapStatusUpdate = MapStatusUpdateFactory.newMapStatus(mMapStatus);
        //改变地图状态
        mBaiduMap.setMapStatus(mMapStatusUpdate);
	}

	private void findViews() {
		mMapView = (MapView) findViewById(R.id.executeplan_mapId);
		mBaiduMap=mMapView.getMap();
		layoutDetailsImg = (ImageView) findViewById(R.id.executeplan_layoutmoreId);
		layoutDetailsImg.setBackgroundResource(R.drawable.layoutshow);
		detailsLayout = (LinearLayout) findViewById(R.id.executeplan_layoutdetailsId);
		detailsLayout.setVisibility(View.GONE);
		layoutDetailsImg.setOnClickListener(this);

		executeplan_nextcross = (TextView) findViewById(R.id.executeplan_nextcrossId);// 下个路口
		executeplan_distance = (TextView) findViewById(R.id.executeplan_distanceId);// 距离
		executeplan_orientation = (TextView) findViewById(R.id.executeplan_orientationId);// 方向
		executeplan_totlecross = (TextView) findViewById(R.id.executeplan_totlecrossId);// 任务路口
		executeplan_totlecross.setText("" + totleCross);
		executeplan_leftcross = (TextView) findViewById(R.id.executeplan_leftcrossId);// 剩余路口
		executeplan_connectstatus = (TextView) findViewById(R.id.executeplan_connectstatusId);// 连接状态
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		// 在activity执行onDestroy时执行mMapView.onDestroy()，实现地图生命周期管理
		mMapView.onDestroy();
	}

	@Override
	protected void onResume() {
		super.onResume();
		// 在activity执行onResume时执行mMapView. onResume ()，实现地图生命周期管理
		mMapView.onResume();
	}

	@Override
	protected void onPause() {
		super.onPause();
		// 在activity执行onPause时执行mMapView. onPause ()，实现地图生命周期管理
		mMapView.onPause();
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.executeplan_layoutmoreId: // 更多图片
			if (detailsLayout.getVisibility() == View.GONE) {
				detailsLayout.setVisibility(View.VISIBLE);
				layoutDetailsImg.setBackgroundResource(R.drawable.layouthide);
			} else if (detailsLayout.getVisibility() == View.VISIBLE) {
				detailsLayout.setVisibility(View.GONE);
				layoutDetailsImg.setBackgroundResource(R.drawable.layoutshow);
			}
			break;
		case R.id.executeplan_executeId: // 开始
			break;
		case R.id.executeplan_stopId: // 暂停
			break;
		case R.id.executeplan_exitId: // 结束
			break;
		case R.id.executeplan_nextcrossId: // 下个路口
			break;
		case R.id.executeplan_distanceId: // 距离
			break;
		case R.id.executeplan_orientationId:// 方向
			break;
		case R.id.executeplan_totlecrossId:// 任务路口
			break;
		case R.id.executeplan_leftcrossId:// 剩余路口
			break;
		case R.id.executeplan_connectstatusId:// 连接状态
			break;
		default:
			break;
		}
	}
}